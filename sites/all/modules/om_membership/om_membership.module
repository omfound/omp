<?php
/**
 * Implements hook_permission
 */
function om_membership_permission() {
  return array(
    'administer om membership' => array(
      'title' => t('Administer OM Membership'), 
      'description' => t('Perform administration tasks for the Open Media Membership system.'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function om_membership_menu() {
  $items = array();
  // Main module routes
  // Main plans page
  $items['membership'] = array(
    'title' => t('Individual Membership Plans'),
    'page callback' => 'om_membership_individual_plans_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  // Alias of main plans page
  $items['membership/plans'] = array_merge($items['membership'], array('type' => MENU_CALLBACK));
  // Organizational plans page
  $items['membership/org-plans'] = array(
    'title' => t('Organizational Membership Plans'),
    'page callback' => 'om_membership_org_plans_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  // Membership form
  $items['membership/signup'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_membership_registration_form', 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/om_membership_registration_form.inc'
  );
  // Main administration page @TODO Remove if we end up not usinga main admin page.
  $items['admin/config/people/membership'] = array(
    'title' => t('Administer Open Media Membership'),
    'page callback' => 'om_membership_admin_form_page',
    'access arguments' => array('administer om membership'),
    'type' => MENU_NORMAL_ITEM
  );
  // Utility routes
  $items['membership/add'] = array(
    'page callback' => 'om_membership_add_membership_and_transfer',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_theme
 */
function om_membership_theme($existing, $type, $theme, $path) {
  return array(
    'om_membership_individual_plans_table' => array(
      'path' => $path . '/theme',
      'template' => 'om_membership_individual_plans_table',
      'file' => 'theme.inc',
      'variables' => array('plans' => array())
    ),
    'om_membership_org_plans_table' => array(
      'path' => $path . '/theme',
      'template' => 'om_membership_org_plans_table',
      'file' => 'theme.inc',
      'variables' => array('plans' => array())
    ),
    'om_membership_registration_helper' => array(
      'path' => $path . '/theme',
      'template' => 'om_membership_registration_helper',
      'file' => 'theme.inc'
    )
  );
}
/**
 * Implements hook_profile2_form_alter
 */
function om_membership_form_profile2_form_alter(&$form, &$form_state) {
  if (!empty($form['profile_manage_organizational_membership'])) {
    unset($form['profile_manage_organizational_membership']['field_invitations'][LANGUAGE_NONE]['add_more']);
    $field_keys = array_keys($form['profile_manage_organizational_membership']['field_invitations'][LANGUAGE_NONE]);
    foreach ($field_keys AS $key => $value) {
      if (!is_numeric($value)) {
        unset($field_keys[$key]);
      }
    }
    $membership = om_membership_get_user_memberships($form['#user']);
    if (!empty($membership)) {
      $membership_meta = entity_metadata_wrapper('commerce_product', array_shift($membership));
      $allowed_fields = $membership_meta->field_membership_invitations->value();
      $field_count = $allowed_fields - (count($field_keys) - 1);
      $start_count = count($field_keys);
      $field_copy = $form['profile_manage_organizational_membership']['field_invitations'][LANGUAGE_NONE][$start_count - 1];
      if ($field_count <= 0) {
        unset($form['profile_manage_organizational_membership']['field_invitations'][LANGUAGE_NONE][$allowed_fields]);
      }
      for ($i = $start_count; $i < ($start_count + $field_count) - 1; $i++) {
        $form['profile_manage_organizational_membership']['field_invitations'][LANGUAGE_NONE][$i] = $field_copy;
      }
    }
  }
}

/**
 * Helper to load plans and send to theme layer.
 */
function om_membership_individual_plans_page() {
  global $user;
  $plans = om_membership_get_plans();
  return theme('om_membership_individual_plans_table', array('plans' => $plans));
}

/**
 * Helper to load plans and send to theme layer.
 */
function om_membership_org_plans_page() {
  $plans = om_membership_get_plans();
  return theme('om_membership_org_plans_table', array('plans' => $plans));
}

/**
 * Utility function to add a membership to the cart 
 *   and transfer the user to the first step of the form.
 * @param int $pid
 *   product id to add.
 */
function om_membership_add_membership_and_transfer($pid) {
  global $user;
  // Check to see if there is an existing membership in the cart.
  $existing_memberships = om_membership_get_currently_selected_membership($user);
  if (!empty($existing_memberships)) {
    // If so remove that membership
    $membership_line_item_ids = array();
    foreach ($existing_memberships AS $membership) {
      $membership_line_item_ids[] = $membership->line_item_id;
    }
    $current_order = commerce_cart_order_load($user->uid);
    $current_order_metadata = entity_metadata_wrapper('commerce_order', $current_order);
    $current_line_items = $current_order_metadata->commerce_line_items->value();
    foreach ($current_line_items AS $key => $line_item) {
      if (in_array($line_item->line_item_id, $membership_line_item_ids)) {
        commerce_cart_order_product_line_item_delete($current_order, $line_item->line_item_id);
      }
    }
  }
  // Add membershipt to cart.
  commerce_cart_product_add_by_id($pid, 1);
  drupal_goto('membership/signup');
}

/**
 * Return all membership plans.
 * 
 * @param array $options
 *   any options acceptable by commerce_product_load_multiple
 * @returns array of product objects
 */
function om_membership_get_plans($options = array()) {
  $products = &drupal_static(__FUNCTION__);
  if (empty($products)) {
    $products = array();
    $query = db_select('commerce_product', 'product');
    $query->fields('product', array('product_id'));
    $query->condition('type', 'membership_plan', '=');
    $query->condition('status', 1, '=');
    $resource = $query->execute();
    $pids = array();
    while($result = $resource->fetchAssoc()) {
      $pids[] = $result['product_id'];
    }
    if (count($pids) > 0) {
      $products = commerce_product_load_multiple($pids, $options);
      usort($products, 'om_membership_sort_products_by_price');
    }
  }
  return $products;
}

/**
 * Usort callback to sort commerce products by their pricefield.
 */
function om_membership_sort_products_by_price($a, $b) {
  $a_wrapper = entity_metadata_wrapper('commerce_product', $a);
  $a_value = $a_wrapper->commerce_price->value();
  $b_wrapper = entity_metadata_wrapper('commerce_product', $b);
  $b_value = $b_wrapper->commerce_price->value();
  if ($a_value['amount'] < $b_value['amount']) {
    return -1;
  }
  return 1;
}

/**
 * Get the plan features voc by name (in case the vid is different).
 */
function om_membership_get_plan_features() {
  $query = db_select('taxonomy_vocabulary', 'voc');
  $query->fields('voc', array('vid'));
  $query->condition('machine_name', 'membership_features', '=');
  $resource = $query->execute();
  $result = $resource->fetchAll();
  if (isset($result[0]->vid)) {
    return taxonomy_get_tree($result[0]->vid);
  }
  else {
    return array();
  }
}

/**
 * If a user has a membership return that role id and the product associated with it.
 * @param object $user
 *   Standard user object.
 * @returns array
 *   returns an array keyed with roles paired to matching product.
 */
function om_membership_get_user_memberships($user) {
  $memberships = array();
  $plans = om_membership_get_plans();
  foreach($plans AS $plan) {
    $meta_wrapper = entity_metadata_wrapper('commerce_product', $plan);
    $membership_ref = $meta_wrapper->field_associated_role->value();
    if (!empty($user->roles[$membership_ref])) {
      $memberships[$membership_ref] = $plan; 
    }
  }
  return $memberships;
}

/**
 * Determine if there is a membership product type in the cart and return it.
 * @param object $user
 *   Standard user object.
 * @returns array
 *   returns a product object
 */
function om_membership_get_currently_selected_membership($user) {
  $memberships = array();
  if ($current_order = commerce_cart_order_load($user->uid)) {
    $order_meta = entity_metadata_wrapper('commerce_order', $current_order);
    $line_items = $order_meta->commerce_line_items->value();
    foreach ($line_items AS $line_item) {
      $line_item_meta = entity_metadata_wrapper('commerce_line_item', $line_item);
      $product = $line_item_meta->commerce_product->value();
      if ($product->type == 'omp_membership_plan') {
        $memberships[] = $line_item;
      }
    }
  }
  return $memberships;
}
/**
 * Given a commerce product entity determine the date range for a new membership.
 *   NB: Unlimited memberships are treated as normal memberships with distant end dates.
 * @param $product object
 *   Instance of a commerce product.
 * @returns array()
 *   returns an array keyed with start and end.
 */
function om_membership_determine_membership_dates($product) {
  $product_metadata = entity_metadata_wrapper('commerce_product', $product);
  $duration = $product_metadata->field_duration->value();
  $start = time();
  $year_seconds = 31536000;
  if ($duration == 0) {
    $end = $start + (250 * $year_seconds);
  }
  else {
    $end = $start + ($duration * $year_seconds);
  }
  $dates = array(
    'start' => $start,
    'end' => $end
  );
  return $dates;
}

/**
 * Query the database for users that have expired memberships.
 * @returns array()
 *   an array of user objects.
 */
function om_membership_get_expired_memberships() {
  // This could be pretty simply modified to allow
  // advanced warnings for membership expiration.
  $users = array();
  $query = db_select('field_data_field_membership_end', 'end');
  $query->join('profile', 'profile', 'end.entity_id=profile.pid');
  $query->fields('profile', array('uid'));
  $query->condition("field_membership_end_value", date('Y-m-d G:i:s'), '<');
  $resource = $query->execute();
  while($result = $resource->fetchAssoc()) {
    $users[] = user_load($result['uid']);
  }
  return $users;
}

/**
 * Return a list of all roles usable by the membership system.
 */
function om_membership_return_membership_roles() {
  $roles = &drupal_static(__FUNCTION__);
  if (empty($roles)) {
    $role_field = field_info_field('field_associated_role');
    foreach ($role_field['settings']['referenceable_roles'] AS $rid => $value) {
      if ($value != 0) {
        $roles[$rid] = user_role_load($rid);
      }
    } 
  }
  return $roles;
}

function om_membership_get_all_org_members() {
  $users = &drupal_static(__FUNCTION__);
  if (empty($users)) {
    $users = array();
    $plans = om_membership_get_plans();
    foreach ($plans AS $key => $plan) {
      $plan_meta = entity_metadata_wrapper('commerce_product', $plan);
      if ($plan_meta->field_user_type->value() == 1) {
        $rid = $plan_meta->field_associated_role->value();
        $query = db_select('users_roles', 'roles');
        $query->fields('roles', array('uid'));
        $query->condition('roles.rid', $rid, '=');
        $resource = $query->execute();
        while($result = $resource->fetchAssoc()) {
          $user = user_load($result['uid']);
          $users[] = $user;
        }
      }
    }
  }
  return $users;
}

/**
 * Get a list of all organiztional admin users.
 *  @returns array
 *    returns array of user objects
 */
function om_membership_get_org_admin_member_users() {
  $users = array();
  $org_users = om_membership_get_all_org_members();
  foreach ($org_users AS $org_user) {
    $admin = om_membership_validate_org_admin_member($org_user);
    if (!empty($admin)) {
      $users[] = $org_user;
    }
  }
  return $users;
}

/**
 * Determine if the provided user is the admin member of an organizational membership.
 *  @param $user StdClass
 *    $user object
 *  @returns boolean
 */
function om_membership_validate_org_admin_member($user) {
  $plan = om_membership_get_user_memberships($user);
  $users = array();
  $query = db_select('field_data_field_membership_end', 'end');
  $query->join('profile', 'profile', 'end.entity_id=profile.pid');
  $query->join('commerce_order', 'c_order', 'profile.uid=c_order.uid');
  $query->fields('c_order', array('order_id'));
  $query->condition("field_membership_end_value", date('Y-m-d G:i:s'), '>');
  $query->condition("profile.uid", $user->uid, '=');
  $resource = $query->execute();
  while($result = $resource->fetchAssoc()) {
    $order = commerce_order_load($result['order_id']);
    $order_metadata = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $order_metadata->commerce_line_items->value();
    foreach ($line_items AS $line_item) {
      $line_item_meta = entity_metadata_wrapper('commerce_line_item', $line_item);
      $product = $line_item_meta->commerce_product->value();
      $product_metadata = entity_metadata_wrapper('commerce_product', $product);
      if (!empty($product->field_user_type)) {
        $membership_type = $product_metadata->field_user_type->value();
        if ($membership_type == 1) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Check to see if the order contains a membership_plan product.
 *   if so grant the proper user role and set the duration of the membership appropriately.
 */
function om_membership_grant_user_role($commerce_order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
  $line_items = $order_wrapper->commerce_line_items->value();
  foreach ($line_items AS $line_item) {
    $line_item_meta = entity_metadata_wrapper('commerce_line_item', $line_item);
    $product = $line_item_meta->commerce_product->value();
    if ($product->type == 'membership_plan') {
      $membership_dates = om_membership_determine_membership_dates($product);
      $role = user_role_load($product->field_associated_role[LANGUAGE_NONE][0]['rid']);
      $order_user = user_load($commerce_order->uid);
      $order_user->roles[$role->rid] = $role->name;
      user_save($order_user);
      $admin_profile = profile2_by_uid_load($order_user->uid, 'membership_administration');
      // Here we could use a metadata wrapper to save the conenent
      // This would be the most clean and correct way to handle saving date fields.
      // However the date module's field implementation does not allow for this
      // Instead we get the follwing kludge.
      $admin_profile->field_membership_start[LANGUAGE_NONE][0]['value'] = date('Y-m-d G:i:s', $membership_dates['start']);
      $admin_profile->field_membership_end[LANGUAGE_NONE][0]['value'] = date('Y-m-d G:i:s', $membership_dates['end']);
      $admin_profile->field_membership_type[LANGUAGE_NONE][0]['value'] = $role->name;
      profile2_save($admin_profile);
    }
  }
}

/**
 * Remove all membership roles from a user.
 */
function om_membership_remove_user_role($user) {
  $user_modified = FALSE;
  $membership_roles = om_membership_return_membership_roles();
  foreach ($user->roles AS $rid => $role) {
    if (!empty($membership_roles[$rid])) {
      $user_modified = TRUE;
      unset($user->roles[$rid]);
    }
  }
  if ($user_modified == TRUE) {
    user_save($user);
  }
}
/** 
 * Search through all org membership holders and make sure their membership status is valid.
 *   Create users for invited email addresses not associated with an account already.
 *   Add roles to existing invited users and remove roles from defunct users.
 */
function om_membership_validate_all_org_sub_members() {
  // We will remove users from this array of all org members until we are left with only defuct members.
  // They will then be removed.
  $org_members = om_membership_get_all_org_members();
  $admins = om_membership_get_org_admin_member_users();
  if (!empty($admins)) {
    foreach($admins AS $admin) {
      $admin_membership = om_membership_get_user_memberships($admin);
      $admin_membership = array_shift($admin_membership);
      $admin_role = user_role_load($admin_membership->field_associated_role[LANGUAGE_NONE][0]['rid']);
      $org_profile = profile2_by_uid_load($admin->uid, 'manage_organizational_membership');
      $org_profile_metadata = entity_metadata_wrapper('profile2', $org_profile);
      $admin_profile = profile2_by_uid_load($admin->uid, 'membership_administration');
      $invites = $org_profile_metadata->field_invitations->value();
      // First remove admins
      foreach($org_members AS $key => $member) {
        if ($member->mail == $admin->mail) {
          unset($org_members[$key]);
        }
      }
      // Next look for valid sub members.
      foreach($invites AS $invite) {
        $invited_user = user_load_by_mail($invite);
        if (empty($invited_user)) {
          // If the user doesn't exist create them and add role.
          $new_user = new StdClass;
          $new_user->roles = array();
          $new_user->roles[$admin_role->rid] = $admin_role->name;
          $new_user->name = substr($invite, 0, strpos($invite, '@'));
          $new_user->mail = $invite;
          $new_user->password = user_password();
          $new_user->status = 1;
          $new_user->is_new = 1;
          user_save($new_user);
          $new_user_profile = profile2_by_uid_load($new_user->uid, 'membership_administration');
          $new_user_profile->field_membership_start[LANGUAGE_NONE][0]['value'] = $admin_profile->field_membership_start[LANGUAGE_NONE][0]['value'];
          $new_user_profile->field_membership_end[LANGUAGE_NONE][0]['value'] = $admin_profile->field_membership_end[LANGUAGE_NONE][0]['value'];
          $new_user_profile->field_membership_type[LANGUAGE_NONE][0]['value'] = $admin_profile->field_membership_type[LANGUAGE_NONE][0]['value'];
          profile2_save($new_user_profile);
          if (module_exists('rules')) {
            rules_invoke_event('om_membership_new_org_sub_member', $new_user);
          }
        }
        else {
          // If the user does exist remove them from the list and add their role.
          foreach($org_members AS $key => $member) {
            if ($member->mail == $invite) {
              unset($org_members[$key]);
            }
          }
          // If the invited user has an account, but not the roll add it!
          if (empty($invited_user->roles[$admin_role->rid])) {
            $invited_user->roles[$admin_role->rid] = $admin_role->name;
            user_save($invited_user);
            $new_user_profile = profile2_by_uid_load($invited_user->uid, 'membership_administration');
            $new_user_profile->field_membership_start[LANGUAGE_NONE][0]['value'] = $admin_profile->field_membership_start[LANGUAGE_NONE][0]['value'];
            $new_user_profile->field_membership_end[LANGUAGE_NONE][0]['value'] = $admin_profile->field_membership_end[LANGUAGE_NONE][0]['value'];
            $new_user_profile->field_membership_type[LANGUAGE_NONE][0]['value'] = $admin_profile->field_membership_type[LANGUAGE_NONE][0]['value'];
            profile2_save($new_user_profile);
            if (module_exists('rules')) {
              rules_invoke_event('om_membership_add_org_membership_existing_user', $invited_user);
            }
          }
        }
      }
    }
  }
  // Remove defunct users.
  foreach($org_members AS $key => $member) {
    om_membership_remove_user_role($member);
  }
}

/**
 * Implements hook_cron
 */
function om_membership_cron() {
  if (module_exists('rules')) {
    $users = om_membership_get_expired_memberships();
    foreach ($users AS $user) {
      rules_invoke_event('om_membership_on_expiration', $user);
    }
  }
  om_membership_validate_all_org_sub_members();
}