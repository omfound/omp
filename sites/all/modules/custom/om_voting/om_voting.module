<?php

/**
** Implements hook_menu
**/
function om_voting_menu() {
  $items = array();

  $items['postmark/inbound'] = array(
    'title' => t('Inbound Postmark Messages'),
    'page callback' => 'om_voting_postmark_inbound',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function om_voting_postmark_inbound () {
  $email = json_decode(file_get_contents('php://input'));
  if ($vote = om_voting_prepare_vote ($email) {
    drupal_write_record('votingapi_vote', $vote); 
  }
  watchdog('postmark', '<pre>'.print_r($email, TRUE).'</pre>');
}

function om_voting_prepare_vote ($email) {
  $email->Subject = trim($email->Subject);
  $vote_value = substr($email->Subject, 0, 1);
  $to_values = explode('@', $email->ToFull[0]->Email);
  $nid = $to_values[0];
  if(is_numeric($vote) && is_numeric($nid)) {
    if($vote_value == 1 || $vote_value == 2 || $vote_value == 3 || $vote_value == 4 || $vote_value == 5) {
      $vote_value = $vote_value * 10;
      $vote = array(
        'entity_type' => 'node',
        'entity_id' => $nid,
        'tag' => 'vote',
        'uid' => 0,
        'value' => $vote_value,
        'value_type' => 'percent',
        'timestamp' => time(),
        'vote_source' => $email->FromFull->Email,
        'prepped' => 1, 
      );

      return $vote;
    }
  }

  return false;
}
