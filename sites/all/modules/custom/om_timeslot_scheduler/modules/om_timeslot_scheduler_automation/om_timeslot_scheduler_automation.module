<?php
/**
 * Alter the scheduling form and add autoscheduling config on.
 */
function om_timeslot_scheduler_automation_form_om_timeslot_scheduler_admin_form_alter(&$form, &$form_state, $form_id) {
  $form['om_timeslot_scheduler_admin']['om_timeslot_scheduler_automation_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Automated Scheduling'),
    '#weight' => 4,
  );

  $form['om_timeslot_scheduler_admin']['om_timeslot_scheduler_automation_info']['om_timeslot_scheduler_automation_status'] = array(
    '#title' => t('Enable Automation'),
    '#description' => 'Turn on or off automation. NB: You must select which channels to automate below.',
    '#type' => 'radios',
    '#options' => array('Disabled', 'Enabled'),
    '#default_value' => variable_get('om_timeslot_scheduler_automation_status', 0),
    '#weight' => 2,
  );

  $channels = array();
  $voc = om_playback_servers_get_channel_vocabulary();
  foreach ($voc AS $channel) {
    $channels[$channel->tid] = $channel->name;
  }

  $form['om_timeslot_scheduler_admin']['om_timeslot_scheduler_automation_info']['om_timeslot_scheduler_automation_channels'] = array(
    '#title' => t('Automation Scheduled Channels'),
    '#description' => 'Select the channels on which automation should run.',
    '#type' => 'select',
    '#options' => $channels,
    '#default_value' => variable_get('om_timeslot_scheduler_automation_channels', ''),
    '#multiple' => TRUE,
    '#weight' => 3,
  );

  $form['om_timeslot_scheduler_admin']['om_timeslot_scheduler_automation_info']['om_timeslot_scheduler_automation_cron_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Frequency of Cron'),
    '#default_value' => variable_get('om_timeslot_scheduler_automation_cron_frequency', 3600),
    '#description' => t('Time between cron jobs in seconds. NB: This value is constrained by your Drupal site\'s cron frequency.'),
    '#weight' => 4,
  );

  $form['om_timeslot_scheduler_admin']['om_timeslot_scheduler_automation_info']['om_timeslot_scheduler_automation_cron_window'] = array(
    '#type' => 'textfield',
    '#title' => t('Days out to update'),
    '#default_value' => variable_get('om_timeslot_scheduler_automation_cron_window', 7),
    '#description' => t('How many days relative to now should automation begin scheduling.'),
    '#required' => TRUE,
    '#weight' => 5,
  );

  $form['om_timeslot_scheduler_admin']['om_timeslot_scheduler_automation_info']['om_timeslot_scheduler_automation_cron_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Duration of update'),
    '#default_value' => variable_get('om_timeslot_scheduler_automation_cron_duration', 3600),
    '#description' => t('Length of scheduling run in seconds.'),
    '#required' => TRUE,
    '#weight' => 6,
  );
}

/**
 * Loop through all the channels marked for automation and schedule each one.
 */
function om_timeslot_scheduler_automation_run_scheduling_jobs() {
  $channels = variable_get('om_timeslot_scheduler_automation_channels', '');
  if (!empty($channels)) {
    $start = time() + (variable_get('om_timeslot_scheduler_automation_cron_window', 7) * 86400);
    $end = $start + variable_get('om_timeslot_scheduler_automation_cron_duration', 3600);
    foreach ($channels AS $tid => $name) {
      $run = array(
        'channel_tid' => $tid,
        'start' => $start,
        'end' => $end,
        'timeslots' => array(),
        'errors' => array()
      );
      // perform airing update steps.
      $context = array();
      _om_broadcast_schedule_get_pbs_airings($run, $context);
      _om_broadcast_schedule_match_drupal_airings($context);
      _om_broadcast_schedule_purge_unmatched($context);
      _om_broadcast_schedule_create_new($context);
      // reset context and perform scheduling steps.
      $context = array();
      _om_timeslot_scheduler_get_timeslots($run, $context);
      _om_timeslot_scheduler_implement_rules($context);
      _om_timeslot_scheduler_get_gaps($context);
      _om_timeslot_scheduler_build_schedule($context);
      $pid = _om_timeslot_scheduler_batch_complete(array(), $context['results'], array(), '', TRUE);
      om_timeslot_scheduler_process_commit($pid, FALSE);
      watchdog('om_timeslot_scheduler_automation', 'Automated scheduling process: ' . $pid . ' was completed for channel ' . $name . '.', WATCHDOG_NOTICE);
    }
  }
}

/**
 * Implements hook_cron
 */
function om_timeslot_scheduler_automation_cron() {
  $seconds_between_jobs = variable_get('om_timeslot_scheduler_automation_cron_frequency', 3600);
  $last_cron = variable_get('om_timeslot_scheduler_automation_last_cron', time() - ($seconds_between_jobs + 1));
  if ($last_cron + $seconds_between_jobs < time()) {
    om_timeslot_scheduler_automation_run_scheduling_jobs();
    variable_set('om_timeslot_scheduler_automation_last_cron', time());
  }
}