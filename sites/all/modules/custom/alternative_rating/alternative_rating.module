<?php
//TODO Need a second bayesian table for web results that uses global average instead

function alternative_rating_menu() {
  $items['admin/config/alternative_rating'] = array(
	  'title' => t('Alternative Rating Settings'),
	  'description' => t('Provides alternative rating distributions'),
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('alternative_rating_settings'),
	  'access arguments' => array('rebuild alternative rating'),
	  'type' => MENU_NORMAL_ITEM
  );
  
  $items['admin/settings/alternative_rating/rebuild'] = array(
    'title' => t('Rebuild Ratings Cache'),
    'description' => t('Truncates and re-populates cached voting table'),
    'page callback' => 'alternative_rating_populate',
    'access arguments' => array('rebuild alternative rating'),
    'type' => MENU_CALLBACK  
  );

  return $items;
}

function alternative_rating_display_category_averages() {
  $averages = alternative_rating_categories();
	
  $display = '';
	$display .= '<br /><br /><h2>Current Category Averages:</h2>';
	$display .= '<table><tr><th>Category</th><th>Shows</th><th>Average</th><th>Shows Above Average</th><th>Shows with no Ratings</th></tr>';
	
	foreach($averages as $tid => $average) {
		$title = alternative_rating_category_title($tid);
		$shows_above_average = 0;
		$shows_above_average = alternative_rating_shows_above_average($average, $tid);
		$shows_no_ratings = 0;
		$shows_no_ratings = alternative_rating_shows_with_no_ratings($tid);
		$show_count = 0;
		$show_count = alternative_rating_number_shows_in_category($tid);
		
		$display .= '<tr>';
		$display .= '<td>'.$title.'</td>';
		$display .= '<td>'.$show_count.'</td>';
		$display .= '<td>'.$average.'</td>';
		$display .= '<td>'.$shows_above_average.'</td>';
		$display .= '<td>'.$shows_no_ratings.'</td>';
		$display .= '</tr>';
	}
	$display .= '</table>';
	$display .= '<strong>AVERAGE ACROSS ALL VOTES: </strong>'.alternative_rating_total_average().'<br />';
	
	//$missing_category = db_result(db_query("SELECT COUNT(nid) FROM {content_type_om_show} WHERE field_om_show_theme_nid IS NULL"));
	//$display .= '<strong>SHOWS MISSING CATEGORY: </strong>'.$missing_category.'<br />';
	return $display;
}

function alternative_rating_number_shows_in_category ($tid) {
  $query = '
    SELECT COUNT(taxonomy_index.nid)
    FROM {taxonomy_index}
    JOIN {node} ON node.nid = taxonomy_index.nid
    WHERE taxonomy_index.tid = :tid AND node.type = :type';

  $count = db_query($query, array(':tid' => $tid, ':type' => 'om_show'))->fetchField();
  return $count;
}

function alternative_rating_shows_with_no_ratings($tid) {
  $shows = alternative_rating_shows_by_category($tid);
    
  $count = 0;
  foreach($shows as $show) {
  	$vote_count = 0;
    $vote_count = alternative_rating_show_vote_count ($show->nid);
  	if($vote_count <= 0) {
      $count ++;
   	}
  }
    
  return $count;
}

function alternative_rating_show_vote_count ($nid) {
  $query = '
    SELECT COUNT(votingapi_vote.value)
    FROM {votingapi_vote}
    WHERE votingapi_vote.entity_id = :nid';
  $count = db_query($query, array(':nid' => $nid))->fetchField();
  return $count;
}

function alternative_rating_shows_above_average($category_average, $tid) {
  $result = alternative_rating_shows_by_category($tid);

  $count = 0;
  foreach($result as $show) {
    $average = alternative_rating_show_average ($show->nid);
    if ($average >= $category_average) {
      $count++;
    }
  }
    
	return $count;
}

function alternative_rating_show_average ($nid) {
  $query = '
    SELECT AVG(votingapi_vote.value)
    FROM {votingapi_vote}
    WHERE votingapi_vote.entity_id = :nid';
  $average = db_query($query, array(':nid' => $nid))->fetchField();
  return $average;
}

function alternative_rating_shows_by_category ($tid) {
  $query = '
    SELECT taxonomy_index.nid
    FROM {taxonomy_index}
    JOIN {node} ON node.nid = taxonomy_index.nid
    WHERE taxonomy_index.tid = :tid AND node.type = :type';
  $shows = db_query($query, array(':tid' => $tid, ':type' => 'om_show'));

  return $shows;
}

function alternative_rating_settings($form, &$form_state) {
  $form['rebuild_tools']['category_averages'] = array(
  	'#markup' => alternative_rating_display_category_averages(),
  );
  $form['rebuild_tools']['rebuild'] = array(
    '#markup' => '<br />'.l('rebuild ratings cache',
      'admin/settings/alternative_rating/rebuild').'<br />',
  );

  return system_settings_form($form);
}

function alternative_rating_category_average($term) {
    $query = '
      SELECT AVG(votingapi_vote.value)
      FROM {votingapi_vote}
      JOIN {taxonomy_index} ON taxonomy_index.nid = votingapi_vote.entity_id
      JOIN {node} ON node.nid = votingapi_vote.entity_id
      WHERE taxonomy_index.tid = :tid AND node.type = :type';
    $category_average = db_query($query, array(':tid' => $term->tid, ':type' => 'om_show'))->fetchField();
    return $category_average; 
}

function alternative_rating_value($nid, $function = 'average') {
   $query = '
     SELECT value
     FROM {votingapi_cache}
     WHERE votingapi_cache.entity_id = :nid AND votingapi_cache.function = :function';
   $node_value = db_query($query, array(':nid' => $nid, ':function' => $function))->fetchField();
   return $node_value;
}

function alternative_rating_total_average() {
  $query = '
    SELECT AVG(votingapi_vote.value)
    FROM {votingapi_vote}
    JOIN {node}
    ON votingapi_vote.entity_id = node.nid
    WHERE node.type = :type';

  $value = db_query($query, array(':type' => 'om_show'))->fetchField();
  return $value;
}

function alternative_rating_qualified_nids() {
  $query = '
    SELECT nid
    FROM {node}
    WHERE node.type = :type';
  $result = db_query($query, array(':type' => 'om_show'));
  foreach($result as $node) {
    $qualified_nids[] = $node->nid;
  }

  return $qualified_nids;
}

function alternative_rating_categories() {
  $category_terms = taxonomy_get_tree(16);
  foreach ($category_terms as $key => $term) {
    $categories[$term->tid] = alternative_rating_category_average($term);
  }

  return $categories;
}

function alternative_rating_category($nid) {
  $query = '
    SELECT taxonomy_index.tid FROM {taxonomy_index}
    JOIN {taxonomy_term_data} ON taxonomy_term_data.tid = taxonomy_index.tid
    WHERE taxonomy_index.nid = :nid AND taxonomy_term_data.vid = :vid';
  $category_tid = db_query($query, array(':nid' => $nid, ':vid' => 16))->fetchField();
  return $category_tid;  
}

function alternative_rating_insert($nid, $bayesian) {
  $result = db_insert('alternative_rating')
    ->fields(array(
      'nid' => $nid,
      'bayesian' => $bayesian,
    ))
    ->execute();
}

function alternative_rating_populate() {
  //first empty the existing alternative_rating table
  db_query('TRUNCATE TABLE {alternative_rating}');

  //get an array of theme categories (node references)
  $categories = alternative_rating_categories();

  //on initial install, build the table of bayesian values
  $nids = alternative_rating_qualified_nids();

  //minimum votes to qualify for rating.
  $minimum_votes = 10;

  //average of all votes
  $total_average = alternative_rating_total_average();

  foreach ($nids as $nid) {
    $average = alternative_rating_value($nid);
    $count = alternative_rating_value($nid, 'count');
    $category_tid = alternative_rating_category($nid);
    $category_average = $categories[$category_tid];

		/** We don't think we need category average?
    $bayesian = ($count / ($count + $minimum_votes)) * $average +
      ($minimum_votes / ($count + $minimum_votes)) * $category_average;
		**/
		
		//The Bayesian Formula
		//weighted rank (WR) = (v / (v+m)) * R + (m / (v+m)) * C
		//where:
		//R = average for the design (mean) = (Rating)
		//v = number of votes for the show = (votes)
		//m = minimum votes required
		//C = the mean vote across dimension
    
    $bayesian = ($count / ($count + $minimum_votes)) * $average +
      ($minimum_votes / ($count + $minimum_votes)) * $total_average;

		//0 + 1
		//if($bayesian == 0) {
		  //print 'nid: '.$nid.'<br />';
			//print 'average: '.$average.'<br />';
			//print 'count: '.$count.'<br />';
			//print 'category_nid: '.$category_nid.'<br />';
			//print 'category_average: '.$category_average.'<br />';
			//print 'bayesian: '.$bayesian.'<br />';
			//print '<br />';
		//}
    alternative_rating_insert($nid, $bayesian);
  }
}

function alternative_rating_category_title($tid) {
  $term = taxonomy_term_load($tid);
  return $term->name;
}

/**
 * Implementation of hook_perm().
 */
function alternative_rating_permission() {
  return array(
    'rebuild alternative rating' => array(
      'title' => t('Rebuild alternative rating'),
      'description' => t('Rebuilds the entire bayesian rating table'),
    ),
  );
}

/**
* Implementation of hook_views_api().
* @return Array with Views API version.
*/
function alternative_rating_views_api() {
  return array('api' => 3.0);
}

function alternative_rating_views_data() {
	$data['alternative_rating']['table']['group'] = t('Bayesian Estimate');
	
	$data['alternative_rating']['table']['join'] = array(
		'node' => array(
			'left_field' => 'nid',
			'field' => 'nid',
		),
	);
	
  $data['alternative_rating']['bayesian'] = array(
    'title' => t('Bayesian Score'),
    'help' => t('Bayesian estimate for nodes with voting api data available.'), // The help that appears on the UI,
    // Information for displaying the nid
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'votingapi_views_handler_sort_nullable',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
	);
	
	return $data;
}

function alternative_rating_bayesian_value($nid) {
  $query = '
    SELECT bayesian FROM {alternative_rating}
    WHERE nid = :nid';
  $bayesian = db_query($query, array(':nid' => $nid))->fetchField();
  return $bayesian;
}

function alternative_rating_cron() {
	alternative_rating_populate();
}
