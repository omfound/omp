<?php

// define the source database
define("SOURCE_DATABASE", 'dom_prod');
define("CIVI_DATABASE", 'dom_civi_prod');
// All users who have signed into account after this date will be migrated.
$cutoff = new DateTime("2012-01-01");
define("USER_MIGRATION_CUTOFF",$cutoff->getTimestamp());
/**
 * You must implement hook_migrate_api(), setting the API level to 2, for
 * your migration classes to be recognized by the Migrate module.
 */
function om_migration_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'OM_USER' => array('class_name' => 'omUserMigration'),
      'OM_USER2' => array('class_name' => 'omUserWithProjectMigration'),
      'OM_USER3' => array('class_name' => 'omUserWithMembershipMigration'),
      'OM_USER4' => array('class_name' => 'omUserWithCertificationMigration'),
      'om_project' => array('class_name' => 'omProjectMigration'),
      'OM_SHOW' => array('class_name' => 'omShowMigration'),
      'om_cablecast_show' => array('class_name' => 'omCablecastShowMigration')
    ),
  );

  return $api;
}

//function om_migration_role_product_relationships() {
//  return array(
//    // programming membership
//    5 => 1,
//    // field
//    6 => 3,
//    // studio
//    8 => 4,
//    // unlimited
//    9 => 5,
//    // organizational
//    10 => 6,
//  );
//}

function om_migration_civi_product_relationships() {
  return array(
    // programming membership
    4 => 1,
    // field
    6 => 3,
    // studio
    7 => 4,
    // editor to unlimited
    8 => 5,
    // unlimited
    9 => 5,
    // organizational np
    10 => 6,
    // organiztional
    12 => 6,
  );
}

function om_migration_role_product_relationships() {
  return array(
    // programming membership
    1 => 5,
    // field
    3 => 6,
    // studio
    4 => 8,
    // unlimited
    5 => 9,
    // organizational
    6 => 10,
  );
}

function om_migration_update_cablecast_files() {
  $query = db_select('field_data_field_om_show_playback_server_id', 'pbsid');
  $query->fields('pbsid', array('entity_id', 'field_om_show_playback_server_id_value'));
  $resource = $query->execute();
  while($result = $resource->fetchObject()) {
    if (!empty($result->entity_id) && !empty($result->field_om_show_playback_server_id_value)) {
      $node = node_load($result->entity_id);
      $node->field_om_show_broadcast_file[$node->language] = array(
        0 => array(
          'uri' => 'cablecast://' . $result->field_om_show_playback_server_id_value
        )
      );
      node_save($node);
    }
  }
}

function om_migration_update_geofield() {
  $query = db_select('field_data_field_old_lat', 'lat');
  $query->join('field_data_field_old_lon', 'lon', 'lat.entity_id=lon.entity_id');
  $query->fields('lat', array('entity_id', 'field_old_lat_value'));
  $query->fields('lon', array('field_old_lon_value'));
  $resource = $query->execute();
  while($result = $resource->fetchObject()) {
    if (!empty($result->field_old_lat_value)) {
      $node = node_load($result->entity_id);
      $node->field_om_show_geofield = array(
        $node->language => array(
          0 => array(
            'lat' => $result->field_old_lat_value,
            'lon' => $result->field_old_lon_value,
            'geo_type' => 'point',
            'wkt' => 'POINT (' . $result->field_old_lon_value .' ' . $result->field_old_lat_value . ')'
          )
        )
      );
      node_save($node);
    }
  }
  return array();
}

function om_migration_update_voting() {
  $query = Database::getConnection('default', 'legacy')->select('votingapi_vote','vote');
  $query->fields('vote', array('content_id', 'value', 'timestamp', 'vote_source', 'uid'));
  $query->condition('content_type', 'node', '=');
  $query->condition('value_type', 'percent', '=');
  $resource = $query->execute();
  while ($result = $resource->fetchObject()) {
    $query = Database::getConnection('default', 'default')->select('field_data_field_old_show_id','old_nid');
    $query->fields('old_nid', array('entity_id'));
    $query->condition('field_old_show_id_value', $result->content_id, '=');
    $resource_old_nid = $query->execute();
    while($result_old_nid = $resource_old_nid->fetchObject()) {
      $vote = new StdClass();
      $vote->entity_id = $result_old_nid->entity_id;
      $vote->revision_id = $result_old_nid->entity_id;
      $vote->entity_type = 'node';
      $vote->value_type = 'percent';
      $vote->value = $result->value;
      $vote->timestamp = $result->timestamp;
      $vote->vote_source = $result->vote_source;
      $vote->uid = $result->uid;
      drupal_write_record('votingapi_vote', $vote);
    }
  }
  return array();
}

/** 
 * Implements hook_permission
 */
function om_migration_permission() {
  return array(
    'administer open media migration' => array(
      'title' => t('Administer Open Media Migration'),
      'description' => t('Access administration pages related to migrations.'),
    ),
  );
}
/**
 * Implements hook_menu
 */
function om_migration_menu() {
  $items = array();
  $items['admin/content/migrate/cablecast_category_map'] = array(
    'title' => t('Cablecast Category to OMP Theme Map'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_migration_cablecast_taxonomy_map_form'),
    'access arguments' => array('administer open media migration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 400
  );
  $items['admin/content/migrate/cablecast_cache'] = array(
    'title' => t('Cablecast Migration Cache'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_migration_build_cablecast_migration_cache_form'),
    'access arguments' => array('administer open media migration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 500,
  );
  return $items;
}
/**
 * Build a little migration helper form.
 */
function om_migration_cablecast_taxonomy_map_form($form, $form_state) {
  $form = array();
  $form['mapping_description'] = array(
    '#markup' => t('This page allows you to map categories from your Cablecast to Themes in the Open Media System.')
  );
  $pbsid = variable_get('default_cablecast');
  if (empty($pbsid)) {
    throw new Exception('No default Cablecast has been set.');
  }
  $pbs = om_playback_servers_load($pbsid);
  $pbs = array_shift($pbs); 
  $controller = om_playback_servers_entity_get_controller($pbs);
  $categories = $controller->get_categories($pbs);
  $defaults = variable_get('cablecast_category_mapping', array());
  if (!empty($categories->GetCategoriesResult->Category)) {
    $theme_vocabulary = taxonomy_vocabulary_machine_name_load('themes');
    $theme_taxonomy = taxonomy_get_tree($theme_vocabulary->vid);
    $taxonomy_options = array('none' => 'none');
    foreach ($theme_taxonomy AS $term) {
      $taxonomy_options[$term->tid] = $term->name;
    }
    foreach ($categories->GetCategoriesResult->Category AS $category) {
      $key = str_replace(' ', '_', strtolower($category->Name));
      $form[$key] = array(
        '#type' => 'select',
        '#title' => $category->Name,
        '#default_value' => !empty($defaults[$key]) ? $defaults[$key] : FALSE,
        '#options' => $taxonomy_options
      );
    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Mapping')
  );
  $form['#submit'] = array('om_migration_cablecast_taxonomy_map_form_submit');
  return $form;
}
/**
 * Handler for that form.
 */
function om_migration_cablecast_taxonomy_map_form_submit($form, &$form_state) {
  $values = array();
  $ignore = array('form_build_id', 'submit', 'op', 'form_token', 'form_id');
  foreach ($form_state['values'] AS $key => $value) {
    if (!in_array($key, $ignore) && $value != FALSE) {
      $values[$key] = $value;
    }
  }
  variable_set('cablecast_category_mapping', $values);
}

function om_migration_build_cablecast_migration_cache_form($form, $form_state) {
  $cache = cache_get('cablecast_migration', 'cache'); 
  $record_count = count($cache->data);
  $form['cache_markup'] = array(
    '#prefix' => '<p>',
    '#markup' => t('The Cablecast migration cache currently has !count record(s) stored.', array('!count' => $record_count)),
    '#suffix' => '</p>'
  );
  $form['cache_build'] = array(
    '#type' => 'submit',
    '#value' => t('Build Cache'),
    '#suffix' => t('The following process may take a few minutes.')
  );
  $form['#submit'] = array('om_migration_build_cablecast_migration_cache_form_submit');
  return $form;
}

function om_migration_build_cablecast_migration_cache_form_submit(&$form, &$form_state) {
  require_once(drupal_get_path('module', 'om_migration') . '/includes/cablecast.inc');
  $batch = array(
    'title' => t('Building Cablecast cache...'),
    'operations' => array(
      array('_om_migration_build_cablecast_cache', array()),
      array('_om_migration_validate_cablecast_cache', array())
    )
  );
  batch_set($batch);
}

function _om_migration_build_cablecast_cache(&$context) {
  $context['message'] = t('Adding cache records...');
  require_once(drupal_get_path('module', 'om_migration') . '/includes/cablecast.inc');
  $pbs = om_migration_get_default_cablecast(); 
  $cache_controller = new CablecastMigrationCache($pbs);
  $cache_controller->collectResults();
}

function _om_migration_validate_cablecast_cache(&$context) {
  $context['message'] = t('Validating cache records...');
  require_once(drupal_get_path('module', 'om_migration') . '/includes/cablecast.inc');
  $pbs = om_migration_get_default_cablecast();
  $cache_controller = new CablecastMigrationCache($pbs);
  $cache_controller->validateResults(); 
}

function om_migration_get_default_cablecast() {
  $pbsid = variable_get('default_cablecast');
  if (empty($pbsid)) {
    throw new Exception('No default Cablecast has been set.');
  }
  $pbs = om_playback_servers_load($pbsid);
  $pbs = array_shift($pbs);
  return $pbs;
}

function om_migration_creative_commons_lookup($uri) {
  $map = array(
    'http://creativecommons.org/licenses/by-nc-nd/3.0/' => 2078,
    'http://creativecommons.org/licenses/by-nc-nd/3.0/us/' => 2078,
    'http://creativecommons.org/licenses/by-nc-sa/3.0/' => 2079,
    'http://creativecommons.org/licenses/by-nc-sa/3.0/us/' => 2079,
    'by-nc-sa' => 2079,
    'http://creativecommons.org/licenses/by-nc/3.0/' => 2077,
    'http://creativecommons.org/licenses/by-nc/3.0/us/' => 2077,
    'http://creativecommons.org/licenses/by-nd/3.0/' => 2080,
    'http://creativecommons.org/licenses/by-nd/3.0/us/' => 2080,
    'http://creativecommons.org/licenses/by-sa/3.0/' => 2081,
    'http://creativecommons.org/licenses/by-sa/3.0/us/' => 2081,
    'http://creativecommons.org/licenses/by/3.0/' => 2076,
    'http://creativecommons.org/licenses/by/3.0/us/' => 2076,
    'http://creativecommons.org/licenses/publicdomain/' => 2082,
    'http://creativecommons.org/licenses/publicdomain/3.0/us/' => 2082
  );
  if (isset($map[$uri])) {
    return $map[$uri];
  }
  return FALSE;
}

function om_migration_creative_commons_migration($batch_size = 5000) {

}

function om_migration_build_cache($batch_size) {
  $count = variable_get('om_migration_creative_commons_progress', 0);
  variable_set('om_migration_creative_commons_progress', $count + $batch_size);  
  $cache = cache_get('om_migration_creative_commons', 'cache');
  $cache = !empty($cache) ? $cache : array();
  $records = om_migration_get_creative_commons_records('http://archive.denveropenmedia.org', 'migrate/creative-commons', $count, $batch_size);
  $cache = array_merge($cache, $records);
  $cache = serialize($cache);
  cache_set('om_migration_creative_commons',  $cache, 'cache');
  drupal_set_message(t('Updated cache for records !from to !to', array('!from' => $count, '!to' => $count + $batch_size)));
}

function om_migration_load_node_by_legacy_id($legacy_id) {
  $query = db_query('field_data_field_old_show_id', 'legacy');
  $query->fields('legacy', array('entity_id'));
  $query->condition('field_old_show_id_value', $legacy_id, '=');
  $resource = $query->execute();
  $output = array();
  while($row = $resource->fetchAssoc()) {
    $output[] = node_load($row['entity_id']);
  }
  return $output;
}

function om_migration_get_creative_commons_records($host, $endpoint, $start = 0, $end = 150) {
  $ch = curl_init();
  $url = array($host, $endpoint, $start, $end);
  $url = implode('/', $url);
  curl_setopt($ch, CURLOPT_URL, $url);
  $data = curl_exec($ch);
  curl_close($ch);
  dsm($data);
  if (is_string($data)) {
    $data = drupal_json_decode($data);
  }
  return $data;
}
