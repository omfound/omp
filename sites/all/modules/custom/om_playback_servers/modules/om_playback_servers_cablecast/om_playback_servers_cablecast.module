<?php
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'om_playback_servers_cablecast') . '/includes/om_playback_servers_cablecast.field.inc';

function om_playback_servers_cablecast_menu() {
  $items = array();
  $items['om_playback_servers/cablecast'] = array(
    'title' => t('Cablecast Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_playback_servers_cablecast_admin_form'),
    'access arguments' => array('administer om playback servers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100
  );
  return $items;
}

function om_playback_servers_cablecast_admin_form($form, $form_state) {
  $query = db_select('om_playback_servers', 'pbs');
  $query->fields('pbs', array('pbsid', 'name'));
  $query->condition('ompbs_type', 'cablecast', '=');
  $resource = $query->execute();
  $pbs = array();
  while ($result = $resource->fetchAssoc()) {
    $pbs[$result['pbsid']] = $result['name'];
  }
  if (empty($pbs)) {
    $link = l('Add one now.', 'om_playback_servers/add');
    $form['default_cablecast'] = array(
      '#title' => t('Default Cablecast'),
      '#markup' => t('You have not created any Cablecast playback servers yet. !addone', array('!addone' => $link)),
    );
  }
  else {
    $form['default_cablecast'] = array(
      '#title' => t('Default Cablecast'),
      '#description' => 'Select which Cablecast contains your files database.',
      '#type' => 'select',
      '#options' => $pbs
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_om_playback_servers_om_playback_server
 */
function om_playback_servers_cablecast_om_playback_servers_om_playback_server() {
  return array(
    'cablecast' => array(
      'title' => t('Cablecast'),
      'description' => t('Provides API support for Tightrope Cablecasts.'),
      'type' => 'om_playback_server',
      'path' => drupal_get_path('module', 'om_playback_servers_cablecast') . '/includes/om_playback_server',
      'file' => 'cablecast_playback_server.inc',
      'playback_server' => array(
        'class' => 'cablecastPlaybackServerController',
        'parent' => 'playbackServerController',
      ),
    )
  );
}

/**
 * Implements hook_permission
 */
function om_playback_servers_cablecast_permission() {
  return array(
    'use cablecast media browser' => array(
      'title' => t('Use Cablecast Media Browser'),
      'description' => t('Select orphaned files from your Cablecast, create show metadata and store them on a node.'),
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function om_playback_servers_cablecast_stream_wrappers() {
  return array(
    'cablecast' => array(
      'name' => t('Cablecast Content'),
      'class' => 'CablecastStreamWrapper',
      'description' => t('Content found on your Cablecast.')
    ),
  );
}
/**
 * Cablecast streamwrapper
 *   Provides methods for accessing and interacting with file resources
 *   on Cablecast playback servers. Uri looks like cablecast://showid
 */
class CablecastStreamWrapper implements DrupalStreamWrapperInterface {
  private $uri;
  private $externalUrl;
  private $pbs;
  private $metadata;
  function __construct() {
    $pbsid = variable_get('default_cablecast');
    if (empty($pbsid)) {
      throw new Exception('No default Cablecast has been set.');
    }
    $pbs = om_playback_servers_load($pbsid);
    $pbs = array_shift($pbs);
    $this->setPlaybackServer($pbs);
  }
  public function setPlaybackServer($pbs) {
    if (is_object($pbs)) {
      $this->pbs = $pbs;
    }
    else {
      throw new Exception('Either a malformed Playback Server or no Playback Server was provided.');
    }
  }
  public function setUri($uri) {
    $this->uri = $uri;
  }
  public function getUri() {
    return $this->uri;
  }
  public function getExternalUrl() {
    if (empty($this->uri)) {
      throw new Exception('Uri is undefined.');
    }
    if (!empty($this->externalUrl)) {
      // From here we either link to IA file resource or 
      // CC resource. This changes whether or not we call
      // get_digital_files or get_show_record.
      $file_record = $this->getFileRecord();
      $this->externalUrl = '';
    }
    return $this->externalUrl;
  }
  public function chmod($mode) {
    return TRUE;
  }
  public function realpath() {
    return FALSE;
  }
  public function dirname($uri = NULL) {
    // need to get file name from uri.
    return FALSE;
  }
  public function stream_open($uri, $mode, $options, &$opened_path) {
    return FALSE;
  }
  public function stream_close() {
    return TRUE;
  }
  public function stream_lock($operation) {
    return FALSE;
  }
  public function stream_read($count) {
    return FALSE;
  }
  public function stream_write($data) {
    return FALSE;
  }
  function stream_eof() {
    return TRUE;
  }
  public function stream_seek($offset, $whence) {
    return FALSE;
  }
  public function stream_flush() {
    return FALSE;
  }
  public function stream_tell() {
    return FALSE;
  }
  public function stream_stat() {
    // Need to work on this one.
    // This should return an array with file status, or FALSE in case of an error.
    return FALSE;
  }
  public function unlink($uri) {
    return FALSE;
  }
  public function rename($from_uri, $to_uri) {
    return FALSE;
  }
  protected function getTarget($uri = NULL) {
    return FALSE;
  }
  public function mkdir($uri, $mode, $options) {
    return FALSE;
  }
  public function rmdir($uri, $options) {
    return FALSE;
  }
  public function url_stat($uri, $flags) {
    // Need to work on this one.
    // This should return an array with file status, or FALSE in case of an error.
    return FALSE;
  }
  public function dir_opendir($uri, $options) {
    return FALSE;
  }
  public function dir_readdir() {
    return FALSE;
  }
  public function dir_rewinddir() {
    return FALSE;
  }
  public function dir_closedir() {
    return TRUE;
  }
  protected function getLocalPath($uri = NULL) {
    return $this->uri;
  }
  public function getDirectoryPath() {
    return FALSE;
  }
  static public function getMimeType($uri, $mapping = NULL) {
    return 'video/mpeg';
  }
  private function getFileRecord() {
    $controller = om_playback_servers_entity_get_controller($this->pbs);
    $show_id = $this->getShowId();
    $options = array(
      'RestrictToOrphanedFiles' => FALSE,
      'RestrictToShowID' => $show_id
    );
    return $controller->get_digital_files($this->pbs, $options);
  }
  private function getShowId() {
    $show_id = str_replace('cablecast://', '', $this->uri);
    if (is_numeric($show_id)) {
      return $show_id;
    }
    throw new Exception('Uri is malformed.');
  }
}