<?php
/**
 * Implementation of hook_permission().
 */

function om_show_permission() {
  return array(
    'administer show' => array(
      'title' => t('Administer OM Show'), 
      'description' => t('Administer OMP functionality for the show interface.'),
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function om_show_menu() {
  $items = array();

  $items['admin/openmedia/om-show'] = array(
    'title' => 'Video Configuration',
    'description' => 'Configuration options for the Open Media Show . ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_show_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/show-status'] = array(
    'title' => 'Status',
    'description' => 'Takes node and returns status',
    'page callback' => 'om_show_status',
    'page arguments' => array(1),
    'access callback' => 'om_show_status_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 9,
  );
  return $items;
}

/**
 * Builds the om_show admininstration settings form.
 */
function om_show_admin_settings() {
  $form = array();
  
  $fields = field_info_fields();
  
  foreach ($fields AS $field => $content) {
    if (isset($content['bundles']['node'])) {
      if (in_array('om_show', $content['bundles']['node'])) {
        $field_options[$field] = $field;
      }
    }
  }

  $form['om_show_filefield'] = array (
    '#type' => 'select',
    '#title' => t('Show File Field'),
    '#description' => t('Select the field that stores your show files (must be on show content type).'),
    '#options' => $field_options,
    '#default_value' => variable_get('om_show_filefield', 'field_om_show_broadcast_file'),
  );

  return system_settings_form($form);
}

/**
* Implementation of hook_form_alter
**/
function om_show_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'om_show_node_form' && $form['type']['#value'] == 'om_show') {
    $om_show_meta_entities = array('field_om_theme', 'field_om_genre', 'field_om_rating', 'field_om_locally_produced', 'field_om_language','field_license');
    $om_show_project_info = array('field_om_project_company', 'field_om_project_contact');
     
    $form['om_show_metadata'] = array(
       '#title' => t('Show Metadata'),
       //'#description' => t('Metadata fields for this show.'),
       '#type' => 'fieldset',
       '#collapsible' => FALSE,
       '#weight' => 3 ,
       '#prefix' => '<div class = "show_metadata">',
       '#suffix' => '</div>', 
     );

     // move metadata to fieldset
     foreach ($om_show_meta_entities AS $field) {
       $form['om_show_metadata'][$field] = $form[$field];
       unset($form[$field]);
     }

    if (!user_access('administer show')) {
      $form['field_om_show_aired']['#type'] = 'hidden';
      $form['field_om_show_video']['#type'] = 'hidden';
      $form['field_om_show_playback_server_id']['#type'] = 'hidden';
      $form['field_om_show_media_format']['#type'] = 'hidden';
      $form['field_om_show_duration']['#type'] = 'hidden';
      $form['revision_information']['#access'] = FALSE;
    }

    //Smarter project selector
    $form['field_om_show_project'] = om_show_project_modifier($form['field_om_show_project']);
  }
}

function om_show_project_modifier($project_form_field) {
  $language = $project_form_field['#language'];
  if(count($project_form_field[$language]['#options']) == 2) {
    $keys = array_keys($project_form_field[$language]['#options']);
    $project_form_field[$language]['#default_value'] = $keys[1];
  }
  if(count($project_form_field[$language]['#options']) < 2) {
    $project_form_field['#description'] = '<strong>'.t('You currently have no projects.').' '.l('Please add one', 'node/add/om-show').' '.t('before submitting a show.').'</strong>';
    drupal_set_message('In order to submit shows or make reservations you must first'.' '.l('create a project', 'node/add/om-project').'.', 'warning');
  }

  return $project_form_field;
}

function om_show_reload($form, $form_state) {
  // We just need to return the form here so that the form is re-rendered.
  return $form;
}

/**
 * Determine if the status page should be shown on show pages.
 * @param $node object
 * @return boolean
 */
function om_show_status_access($node) {
  if ($node->type == 'om_show') {
  global $user;
    if ($user->uid == $node->uid && user_access('administer show')) {
      return TRUE;
    }
  }
}

/**
 * Build the status tab for the perspective show.
 * @param $node object
 * @return themed content
 */
function om_show_status($node) {
  
  global $base_path;
  
  $output = 'Title: ' . $node->title . '<br />';
  
  $ops_exists = module_exists('om_playback_servers');
  
  $render = array();
  
  if ($ops_exists) {
    $channels = om_playback_servers_get_channel_vocabulary();
    $channel_item = array();
    if ($node->field_om_show_broadcast_file['und'][0]['fid']) {
      $broadcast_file = file_load($node->field_om_show_broadcast_file['und'][0]['fid']);
    }
    if (is_object($broadcast_file)) {
      foreach ($channels AS $channel) {
        $pbs = om_playback_servers_get_pbs_by_term($channel->tid);
        $pbs = array_shift($pbs);
        $controller = om_playback_servers_entity_get_controller($pbs);
        if (isset($node->field_om_show_id['und'][0]['value'])) {
          // Currently a show can only be on on one pbs.
          // We just need to makde field_om_show_id a multivalue field
          // that some how is keyed to channel.
          $metadata = $controller->check_metadata_status($pbs, $node->field_om_show_id['und'][0]['value']);
          if (!empty($metadata)) {
            $channel_item[$channel->name . '_name'] = array(
              '#prefix' => '<dt>',
              '#markup' => $channel->name,
              '#suffix' => '</dt>',
            );
            $channel_item[$channel->name . '_message'] = array(
              '#prefix' => '<dd>',
              '#markup' => 'Available for scheduling on this channel.',
              '#suffix' => '</dd>',
            );
          }
        }
      }
    }
    else {
      $channel_item['error'] = array(
        '#prefix' => '<dt>',
        '#markup' => 'No broadcast file was found.',
        '#suffix' => '</dt>',
      );
    }
    $channel_status = array(
        '#prefix' => '<dl>',
        $channel_item,
        '#suffix' => '</dl>'
    );
    $render['server_title'] = array(
      '#prefix' => '<h3>',
      '#markup' => 'Server Status',
      '#suffix' => '</h3>',
    );
    $render['channel_status'] = $channel_status;
    
  } // end if ops
  if (empty($render)) {
  $links = array(
    '!ops' => l('OM Playback Servers', 'http://drupal.org/project/om_playback_servers'),
    '!om_airing' => l('OM Broadcast Schedule', 'http://drupal.org/project/om_broadcast_schedule'),
  );
  $render = array(
    t('empty status page')  => array(
        '#prefix' => '<p>',
        '#markup' => t('This page contains functionality and reports that require !ops and !om_broadcast_schedule. These modules are currently not installed.', $links),
        '#suffix' => '</p>',
      ),
    );
  }
  return $render;
}

/**
 * Take string show rating and check to see if it is considered adult.
 * @param $rating string
 * @return boolean
 */
function om_show_is_adult($rating){
  if(strstr($rating,'TV-MA') || strstr($rating,'MPAA: R') || strstr($rating,'MPAA: NC-17') || strstr($rating,'MPAA: NR') ){
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Pass type as user/project and uid/nid
 * returns total hours
 */
function om_show_total_contributed($id, $type = 'user', $date = NULL) {
  // remake
}

/**
 * Pass type as user/project and uid/nid
 * returns total hours
*/

function om_show_total_shows($id, $type = 'user', $date = NULL) {
  // remake
}

/**
 * Pass type as user/project and uid/nid
 * returns total hours
 */
function om_show_total_hours($id, $type = 'user', $date = NULL) {
  // remake
}

/**
 * Reset data for show. Removes metadata from PBS if OPS is present. Removes file from IA if IA is present.
 * Removes file from directory and node.
 * @param nid node id
 * @returns string of response messages.
 */

function om_show_reset_show($nid) {
  
  $node = node_load($nid);
  
  if (module_exists('om_playback_servers')) {
    $response .= om_show_delete_metadata($nid);
  }
  
  if (module_exists('internet_archive')) {
    $tid_count = db_result(db_query('SELECT COUNT(tid) FROM {internet_archive} WHERE nid=%d', $node->nid));
    if ($tid_count == 1) {
      $get_tid = db_result(db_query('SELECT tid FROM {internet_archive} WHERE nid=%d', $node->nid));
      
      $archive_data = internet_archive_load_data_tid($get_tid);
      
      internet_archive_delete_files($archive_data);
      
      db_query("DELETE FROM {internet_archive} WHERE tid=%d", $get_tid);
      
      $response .= 'Attempted to delete' . $node->nid . ' with transfer id of ' . $get_tid . ' from Internet Archive. <br/>';
    }
    else {
      $response .= 'This show has more than one file present on Internet Archive or was never transfered. <br/>';
    }
  }
  
  $deletion = unlink($node->field_om_show_mpeg2[0]['filepath']);
  
  if ($deletion) {
    db_query("DELETE FROM {files} WHERE filename='%s'", $node->field_om_show_mpeg2[0]['filename']);
    $response .= 'Successfully deleted mpeg2(' . $node->field_om_show_mpeg2[0]['filepath'] . '). <br/>';
    unset($node->field_om_show_mpeg2[0]);
    $response .= 'Successfully removed mpeg2 from show. <br/>';
  }
  else {
    $response .= 'Failed to delete mpeg2. <br/>';
  }
  
  node_save($node);
  
  return $response;
}

/**
 * Build confirmation page for reset.
 * @param $nid show nid
 * @return string themed $output
 */
function om_show_reset_show_confirm($nid) {
  
  $output .= '<h3 class="warning">Warning: you are about to delete content permanently.</h3>';
  $options = array(
    '!cancel' => l('Cancel', 'node/' . $nid . '/show-status'),
    '!proceed' => l('Proceed', 'show/reset/' . $nid),
  );
  $output .= t("Would you like to reset show records? !cancel or !proceed.", $options);
  
  return $output;
}

/**
 * Remove a show's metadata from all playback servers with the delete content hook.
 * @param $nid int show nid
 * @return $response string response
 */
function om_show_delete_metadata($nid) {
  
  $node = node_load($nid);
  
  if (module_exists('om_playback_servers')) {
    $channels = om_playback_servers_get_channel_taxonomy();
    
    $file_info = om_show_get_file_value($node);
    
    foreach($channels AS $channel) {
      om_playback_servers_delete_content($channel->name, $file_info['filename']);
      $response .= 'Removed content from' . $channel->name . '<br/>';
    }
  }
  return $response;
}

/**
 * Check to see if a show has any airtimes in the future.
 * @param $filename string filename
 * @return boolean
 */
function om_show_check_for_airtimes($node) {
  
  $file_info = om_show_get_file_value($node);
  
  return $check ? TRUE : FALSE;
}

/**
 * om_playback_servers_get_file_field_info
 * Get field name and type
 * @returns array
 */
function om_show_get_file_field_info () {
  
  $field_name = variable_get('om_show_filefield', NULL);
  
  if ($field_name) {
    
    $field_info = om_show_get_field_tables($field_name);
    
    return array($field_info[0]['type'], $field_info[0]['value_column'], $field_info[0]['name']);
  }
  return array();
}

/**
 * Get file information from node based on storage type.
 * @param $node full node object
 * @return $file array
 */
function om_show_get_file_value ($node) {
  
  $field_info = om_show_get_file_field_info();
  
  if ($field_info[0] == 'text') {
    $file_path = db_result(db_query('SELECT ' . $field_info[1] . ' FROM {' . $field_info[2] . '} WHERE nid = %d', $node->nid));
    $file_name = basename($file_path);
    $filedata ['filepath'] = $file_path;
    $filedata ['filename'] = $file_name;
    return $filedata;
  }
  else if ($field_info[0] == 'filefield') {
    $filedata = db_query('SELECT filename, filepath FROM {files} JOIN {' . $field_info[2] . '} ON ' . $field_info[2] . '.' . $field_info[1] . ' = files.fid WHERE nid = %d', $node->nid);
    while ($row = db_fetch_array($filedata)) {
      return $row;
    }
  }
  return array();
}

/**
 * Get table data provided with field information.
 * @param $fieldname the machine name of the field.
 * @return array of info or empty
 */
function om_show_get_field_tables($fieldname) {
  
  $fields = content_fields($fieldname, 'om_show');
  
  $field_array[$fieldname] = $fields;
  
  foreach ($field_array as $field_name => $field_info) {
    $db_info = content_database_info($field_info);
    switch ($field_info['type']) {
      case 'filefield':
        $value_key = $field_name . '_fid';
      break;
      case 'text':
        $value_key = $field_name . '_value';
      break;
    }
    
    $tables = array();
    
    $tables[] = array(
      'name' => $db_info['table'],
      'value_column' => $value_key,
      'type' => $field_info['type'],
    );
    
  }
  
  return $tables;
}
